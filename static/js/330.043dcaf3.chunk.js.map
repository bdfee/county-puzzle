{"version":3,"file":"static/js/330.043dcaf3.chunk.js","mappings":"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","sources":["components/puzzle/svgUtilities.js","components/puzzle/svg-pieces.js"],"sourcesContent":["import { select, selectAll } from '../../helpers/d3.imports'\nimport { stateId } from '../../helpers/utilities'\n\n// pass a d3 selection, applys 'located' attributes\n// lowers the county to the bottom then lowers the state to bottom\nconst applyLocatedAttr = (selection) => {\n  selection\n    .attr('transform', 'translate(0,0)')\n    .attr('stroke-width', 0.1)\n    .attr('stroke', 'lightgray')\n    .attr('fill', 'slategray')\n    .on('.drag', null)\n    .lower()\n\n  select(`#state-${selection.attr('state-id')}`).lower()\n}\n\n// checks if target's transform values are within threshold to be considered located\n// optionally returns the x, y values as number\nexport const transformUtility = (selection, withReturn = true) => {\n  const threshold = 0.75\n  const [x, y] = selection.attr('transform').match(/-?\\d+(\\.\\d+)?/g)\n  if (Math.abs(+x) < threshold && Math.abs(+y) < threshold) {\n    applyLocatedAttr(selection)\n    if (withReturn) return [0, 0]\n  } else if (withReturn) return [+x, +y]\n}\n\n// sets visibility attributes of counties by state\nexport const filterStates = (stateFilter) => {\n  selectAll('.county, .state')\n    .style('visibility', 'visible')\n    .attr('pointer-events', 'all')\n    .attr('is-hidden', false)\n  if (stateFilter) {\n    selectAll('.county, .state')\n      .filter(({ id }) => (stateFilter.includes(stateId(id)) ? false : true))\n      .style('visibility', 'hidden')\n      .attr('pointer-events', 'none')\n      .attr('is-hidden', true)\n  }\n}\n// if state filter is selected, update zoom pan pinch to state node coords\nexport const updateZoom = (transformRef, stateFilter) => {\n  if (stateFilter) {\n    const node = select(`#state-${stateFilter}`).node()\n    transformRef.current.zoomToElement(node, 4, 500, 'easeOut')\n  } else {\n    transformRef.current.resetTransform(500, 'easeOut')\n  }\n}\n","import { useRef, useEffect } from 'react'\nimport { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch'\nimport { browserName } from 'react-device-detect'\nimport { select, selectAll, drag, geoAlbersUsa, geoPath } from '../../helpers/d3.imports'\nimport { feature } from 'topojson-client'\nimport { stateDictionary } from '../../helpers/state.dictionary'\nimport { stateId } from '../../helpers/utilities'\nimport { transformUtility, filterStates, updateZoom } from './svgUtilities'\n\nconst Pieces = ({\n  translatedCountyGeometry,\n  stateGeometry,\n  baseTopology,\n  stateFilter,\n  toolTipHandlers,\n  setTooltipText,\n  updateTranslations\n}) => {\n  const mapRef = useRef()\n  const transformRef = useRef()\n  const { showTip, moveTip, clearTip } = toolTipHandlers\n\n  // chrome is automatically factoring in the scale factor from zoom pan pinch\n  // the zoom factor needs to be accounted for when dragging\n  const dragHandlerChrome = drag()\n    .on('start', function () {\n      setTooltipText('')\n      select(this).raise()\n      selectAll('.county').attr('pointer-events', 'none')\n    })\n    .on('drag', function ({ dx, dy }) {\n      const { e: startX, f: startY } = select(this).node().transform.baseVal[0].matrix\n      select(this).attr('transform', `translate(${startX + dx},${startY + dy})`)\n    })\n    .on('end', function ({ subject }) {\n      updateTranslations(subject.id, transformUtility(select(this)))\n      selectAll('.county').attr('pointer-events', 'all')\n    })\n\n  // firefox needs the zoom factor from zoom pan pinch to be factored in manually\n  // the zoom factor needs to be accounted for when dragging\n  const dragHandlerFirefox = drag()\n    .on('start', function () {\n      setTooltipText('')\n      select(this).raise()\n      selectAll('.county').attr('pointer-events', 'none')\n    })\n    .on('drag', function ({ dx, dy }) {\n      const transformMatrix = select(this).node().transform.baseVal[0].matrix\n      const { e: translateX, f: translateY, a: scaleX, d: scaleY } = transformMatrix\n      // get scale from react zoom pan pinch\n      const zoomScale = transformRef.current.instance.transformState.scale\n      // Calculate the scaled translation\n      const scaledDx = dx / scaleX / zoomScale\n      const scaledDy = dy / scaleY / zoomScale\n      // calculate the new coords\n      const newX = translateX + scaledDx\n      const newY = translateY + scaledDy\n\n      select(this).attr('transform', `translate(${newX},${newY})`)\n    })\n    .on('end', function ({ subject }) {\n      updateTranslations(subject.id, transformUtility(select(this)))\n      selectAll('.county').attr('pointer-events', 'all')\n    })\n\n  useEffect(() => {\n    // remove any svg el from previous render\n    select(mapRef.current).selectAll('*').remove()\n\n    const width = window.outerWidth\n    const height = window.outerHeight\n\n    const counties = { type: 'GeometryCollection', geometries: translatedCountyGeometry }\n    const states = { type: 'GeometryCollection', geometries: stateGeometry }\n\n    // geoAlbersUSA projection, center on window/svg\n    const projection = geoAlbersUsa()\n      .translate([width / 2, height / 2])\n      .scale(900)\n\n    // Create a path generator that converts GeoJSON geometries to SVG path elements\n    const pathGenerator = geoPath().projection(projection)\n\n    const svg = select(mapRef.current)\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', `0 0 ${width} ${height}`)\n\n    svg\n      .selectAll('.state')\n      .data(feature(baseTopology, states).features)\n      .enter()\n      .append('path')\n      .attr('class', 'state')\n      .attr('d', pathGenerator)\n      .attr('fill', ({ id }) => stateDictionary[id].color)\n      .attr('id', ({ id }) => `state-${id}`)\n\n    // Create a path element for each count\n    const countyPaths = svg\n      .selectAll('.county')\n      .data(feature(baseTopology, counties).features)\n      .enter()\n      .append('path')\n      .attr('class', 'county')\n      .attr('d', pathGenerator)\n      .attr('stroke', ({ id }) => stateDictionary[stateId(id)].color)\n      .attr('stroke-width', 0.15)\n      .attr('fill', 'lightgray')\n      .attr('id', ({ id }) => `county-${id}`)\n      .attr('state-id', ({ id }) => `${stateId(id)}`)\n      .attr('data-name', ({ properties }) => `${properties.name}`)\n      .attr('is-hidden', false)\n      .attr(\n        'transform',\n        ({\n          properties: {\n            transpose: [x, y]\n          }\n        }) => `translate(${x}, ${y})`\n      )\n      .on('mouseover', function ({ pageX, pageY }, { properties }) {\n        if (select(this).attr('is-hidden') === 'false') {\n          showTip(pageX, pageY, properties)\n        }\n      })\n      .on('mousemove', ({ pageX, pageY }) => moveTip(pageX, pageY))\n      .on('mouseout', () => clearTip())\n\n    const dragHandler = browserName === 'Chrome' ? dragHandlerChrome : dragHandlerFirefox\n\n    countyPaths.call(dragHandler).each(function () {\n      transformUtility(select(this), false)\n    })\n  }, [translatedCountyGeometry])\n\n  useEffect(() => {\n    filterStates(stateFilter)\n    updateZoom(transformRef, stateFilter)\n  }, [stateFilter, translatedCountyGeometry])\n\n  return (\n    <TransformWrapper ref={transformRef}>\n      <TransformComponent>\n        <div ref={mapRef} className=\"pieces\"></div>\n      </TransformComponent>\n    </TransformWrapper>\n  )\n}\n\nexport default Pieces\n"],"names":["applyLocatedAttr","selection","attr","on","lower","select","concat","transformUtility","withReturn","arguments","length","undefined","_selection$attr$match","match","_selection$attr$match2","_slicedToArray","x","y","Math","abs","_ref","translatedCountyGeometry","stateGeometry","baseTopology","stateFilter","toolTipHandlers","setTooltipText","updateTranslations","mapRef","useRef","transformRef","showTip","moveTip","clearTip","dragHandlerChrome","drag","this","raise","selectAll","_ref2","dx","dy","_select$node$transfor","node","transform","baseVal","matrix","startX","e","startY","f","_ref3","subject","id","dragHandlerFirefox","_ref4","transformMatrix","translateX","translateY","scaleX","a","scaleY","d","zoomScale","current","instance","transformState","scale","newX","newY","_ref5","useEffect","remove","width","window","outerWidth","height","outerHeight","counties","type","geometries","states","projection","geoAlbersUsa","translate","pathGenerator","geoPath","svg","append","data","feature","features","enter","_ref6","stateDictionary","color","_ref7","countyPaths","_ref8","stateId","_ref9","_ref10","_ref11","properties","name","_ref12","_ref12$properties$tra","transpose","_ref13","_ref14","pageX","pageY","_ref15","dragHandler","browserName","call","each","style","filter","includes","filterStates","zoomToElement","resetTransform","updateZoom","_jsx","TransformWrapper","ref","children","TransformComponent","className"],"sourceRoot":""}